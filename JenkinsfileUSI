def repoName
def repoURL
def branchName
pipeline {
  agent { label 'worker1' }
  tools {
  //nodejs "NODE"
  maven "maven3.6.3"
  }
  //options { skipDefaultCheckout() }
  environment {
        buildnumber = "${BUILD_NUMBER}"
        jobName    = "${env.JOB_NAME}"
         nexus_docker_repo = '35.211.157.43:8082'
         dcp_demo_app_tag = 'petclinic'
        
    }
  stages{
     
  //  stage('SCM Checkout'){
//	steps {
  //      script {
    //  def scmVars = checkout([
   //     $class: 'GitSCM'
  //    ])
   //   echo "env.GIT_COMMIT"
    //  echo "${env.GIT_COMMIT}"
  //  }
  //     checkout([$class: 'GitSCM', branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'Github_HDFC_Demo', url: 'https://github.com/mudaliar20/PowerTrain.git']]])
        
                
  //  }
//	} 
    
    stage(" Build Management using Maven"){
	steps{
     // def mavenHome =  tool name: "maven3.6.3", type: "maven"
     // def mavenCMD = "${mavenHome}/bin/mvn"
      sh "mvn clean package -DskipTests"
    //  sh 'npm install'
      
    } 
	}
        
    stage('Sonarqube') {
        environment {
        scannerHome = tool 'SonarQubeScanner'
}
        steps {
        withSonarQubeEnv('sonarqube') {
        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=petclinic -Dsonar.sources=${workspace}/target" 
    }
    }
}
        
stage('Build docker images') {
                  
            
            steps {               
              withCredentials([usernamePassword(credentialsId: 'NexusID', usernameVariable: 'nexus_docker_repo_user', passwordVariable: 'nexus_docker_repo_password')]){

               sh '''#!/bin/bash -l

                 echo "Publish Docker Image to Nexus"
                
                 docker login -u ${nexus_docker_repo_user} -p ${nexus_docker_repo_password} ${nexus_docker_repo}

                 docker build -t ${nexus_docker_repo}/${dcp_demo_app_tag}:${BUILD_NUMBER} -f Dockerfile .

                 docker push ${nexus_docker_repo}/${dcp_demo_app_tag}:${BUILD_NUMBER}
                
                 '''
              }                
                
            }
        }
    
     
  stage('Fossa Analyze') {
  steps{
       sh 'cd ${WORKSPACE}'
        sh 'FOSSA_API_KEY=72c7481f1a4038944db893d42ae792c2 fossa analyze'

    }
    }
    stage('Vulnerability Scanner') {
    steps {
    script{
   
          //sh 'anchore-cli registry add 35.211.157.43:8082 admin welcome@123'
           def imageLine = 'openjdk:8-jre-alpine'
           writeFile file: 'anchore_images', text: imageLine
           anchore name: 'anchore_images'
          }
       }
    }

	
     stage('Capture Environment variables') {
	 steps{
	 script{
	 repoName = determineRepoName()
         branchName = getGitBranchName() 
         repoURL = determineRepoURL()
	 }
         sh ' rm -rf *.properties'
        	     
         sh "echo jobName=${env.JOB_NAME} >> variable.properties"
sh "echo buildNumber=${env.BUILD_NUMBER} >> variable.properties"
sh "echo repoName=$repoName >> variable.properties"
sh "echo branchName=$branchName >> variable.properties"
sh "echo repoURL=$repoURL >> variable.properties"
sh "echo commitId=${env.GIT_COMMIT} >> variable.properties"
    }
     }
     
    
}
  
    post {
        always {
            
            archiveArtifacts artifacts: "variable.properties"
        }
    } 

}



String determineRepoName() {
    return scm.getUserRemoteConfigs()[0].getUrl().tokenize('/')[3].split("\\.")[0]
}
String determineRepoURL() {
    return scm.getUserRemoteConfigs()[0].getUrl()
}
String getGitBranchName() {
    return scm.branches[0].name.tokenize("*")[0].split("\\/")[1]
}

